브라우저가 타입스크립트가 아니라 자바스크립트를 이해하기 때문에 타입스크립트 컴파일 시 타입스크립트가 자바스크립트로 변환/
타입스크립트가 자바스크립트로 변환되었다는 거 자체가 문제 없는 코드라는 것.

타입스크립트를 쓸 때 두가지 방법
1 ) 명시적으로 형을 써준다. -> let a : numebr = 1;
2 ) 타입스트립트가 알아서 형을 바꿔주라고 떠맡기고 형을 쓰지 않는다. -> let a =1;

let a = "hello" --> :string
let b = false --> :boolean
let c = [1,2,3] --> :number[]
c.push("1") -->에러 발생

const player ={
name : "nico" --> name : string
}
player.name = 1; --> 에러 발생
player.hello(); --> 에러발생 player객체에 hello가 없음

let a : number[] = [1,2]; //let a =[1,2];
let b : string[] = ["li", "1"]; // let b =["li", "1"];
let c : boolean[] = [true]; // let c = [true];

객체에 타입을 지정하는 방법
1) const player : {name : string, age?:number} = { name : "sunok",};
2) type info = {name : string, age?:number}; // age?:number라는 말은 age가 undefined거나 number라는 뜻
const player : info = { name : "sunok"};

// 객체에 age가 10이상인지 확인할 때, 우선 age가 존재하는지 먼저 파악해야 한다.
if(player.age && player.age >=10)

type Name = string;
type Age = number;

// 함수 makePlayer
기능 :object를 만들고 그 결과로 player를 반환

function makePlayer(name:string){ // 매개변수 name의 타입이 string이라는 말
return {
name : name // name에 값이 name 즉, name : name 이라면 name이라고만 적어도 된다.

} // 반환값이 있는 함수니까 큰틀로봐서{return }인거고, 객체를 반환하기 때문에 {return }안에 {}형태가 있는거고 그 안에 내용물이 있는것
} // 함수 끝

const makeplayer = (name : string) => ({name})
화살표 함수의 몸체가 한줄 일 때, {return }이 생략되고, 객체를 반환할 때는 ()붙여야하고,

const sunok = makePlayer("sunok");
과 동일한 것은
const sunok = { name : "sunok"};
sunok.age = 12 --> 에러 발생

함수에 타입을 지정하는 방법 --> 쉽게 생각하면 함수만 먼저 써놓고 함수명 뒤에다가 : 타입을 써라
타입을 지정시 여러개를 지정하고 싶으면 { 요소1, 요소2...} 이런식으로 지정해

즉, 타입을 지정할 때는 변수명이라던가 함수명이라던가 인수명이라던가 뒤에 :타입을 쓰면된다.

화살표 함수로 만들어볼까?
const makePlayer = (name : string) => {return {name}} // 화살표 함수의 몸체가 한줄이면 {return }을 ()로 바꿀 수 있다.
const makePlayer = (name : string) => ({name})

화살표 함수의 타입은 어디다가 적을까? '=>'바로 전
const makePlayer = (name: string) : info =>({name}); // ({name}) === ({name : name})
const makePlayer = (name : string) : {name : string, age?:number} => ({name})

typescript에만 있음
1) readonly(불변성을 가지게 함 immutability) : 요소들을 읽기 전용으로 지정. 쓰기는 못하겠네 --> 수정을 못하겠네
// 지정하고 싶은 요소 '앞'에 readonly를 붙이면 된다.
ex)
interface IPlayer {
readonly name: string,
age?: number
}
const player : IPlayer = {name: "sunok",}; // name 요소 앞에 readonly를 붙여서 변경할 수 없게 만듦
player.name = "hi" --> 수정하려고 하니 에러발생
readonly name : string --> name의 형인 string 다른 형으로 변경될수 없다는 소리가 아니라 name자체가 변경될 수 없다는 소리다.

const numbers : readonly number[] = [1,2,3,4];
numbers.push(5) // -> 에러발생 why? numbers의 형이 readonly이고, number[]이다. 즉, numbers는 수정할 수 없고, number[]형이다.

const names : readonly string[] =["123", "234"]; // names의 형은 readonly이면서 string[]이다. names의 형이 string[]에서 number[]로 바뀔 수 없다는 게 아니다.
readonly는 names에 묶여 있는 것임

typescript에만 있음
2) tuple
기능
array를 생성.
특정 위치에 특정 타입이 있어야 함.
--> 즉, tuple은 배열을 생성할 때, 그리고 그 배열의 요소에 여러 타입을 넣고 싶을 때 쓰이겠네
const player : [string, number, boolean] =[] // 에러발생
why? player는 1) 3개의 요소를 필요로 하고
2) 그 요소의 형이 순서대로 string, number, boolean이여야 한다.

const player : [string, number, boolean] =["sunok", 1, true]; 일 때
player[0] = 1 ; // 에러 발생 why? player는 배열이다. player[0]의 타입은 string, player[1]의 타입은 number, player[2]의 타입은 boolean
타입스크립트가 player의 0번째 index는 항상 string이여야 한다는 사실을 알고 있음

readonly(불변성)과 tuple을 합치는 방법
const player : readonly [string, number, boolean] = ["sunok", 1, true]; // 여기서 readonly가 묶인것이 tuple이 아니라 player객체이다. 즉, player가 불변성이 되는거다.
즉, player[0] = "hi"; 도 에러가 난다. 첫번째 인덱스가 같은 형이여도 다시한번말하지만 readonly가 묶인 것이 player객체이지 tuple과 readonly가 엮인 것이 아니다.
let a : undefined = undefined;
let b : null = null;

// 선택적 타입은 undefined가 될 수 있다.
type Player={
age?:number // ?는 단축어인데, number이거나 undefined라고 해줌
}

let a = [] // a의 타입은 any[] ( 즉,number[], string[] , 등등 다 된다는 말)
any : typescript로부터 빠져나오고 싶을 때 쓰는 타입. 아무 타입이나 될 수 있다.

--> typescript에서 javascript처럼 보호장치 없애버리고 싶을 때 any쓸 수 있겟네
const a : any[] = [1,2,3]
const b : any = true;
a.push("2") //가능
a.push(true) // 가능 --> a는 [1,2,3,"2", true]
a + b // "[1,2,3,"2", true]true"라는 문자열

#배열이 const로 선언됐을 때, push, pop이 가능한 이유 --> push, pop는 재선언, 재할당을 하지 않기 때문
https://morohaji.tistory.com/55

type info = {
name : string,
age ?:number,
}

const playerMaker=(name:string) :{name: string, age?:number} => ({name})
const numbers : readonly [string, number, boolean] = ["hi", 1, true];
numbers[0] = "hello" // 에러발생

let a : undefined = undefined;
let b : null = null;

let a : unknown;
if(typeof a ==='number'){
let b = a + 1;
}
if(typeof b ==='string'){
let b = a.toUpperCase();
}
unknown : 변수의 타입을 미리 알지 못할 때 사용하는 type
void : 아무것도 return 하지 않는 함수를 대상으로 하는 type 보통 void를 따로 지정해줄 필요는 없다.

function hello() : void{ // 함수 타입을 : void라고 지정하지 않아도 자동으로 인식한다. 따라서 : void를 입력하지 않아도 된다.
console.log('x');
}
const a = hello(); // hello함수를 호출하기 때문에 console창에 x가 찍히고, a의 타입은 void 형이다.

never : 함수가 절대 return하지 않을 때 발생함. 항상 오류를 출력하거나 리턴 값을 절대로 내보내지 않음을 의미한다. 이는 무한 루프에 빠지는 것과 같다.
never 타입을 지정한 변수에 never가 아닌 타입은 할당할 수 없다.

숫자 값을 never 타입 변수에 할당할 수 없다.
ex)
let never_type : never;
never_type = 99; // 오류 발생
never_type = function hello():never{ // never type을 할당함
throw new Error("xxx");
}

function hello(name : string : number){
if(typeof name ==="string"){
name
}else if(typeof name === "number"){
name
}
else{ // 이 else는 절대 실행되면 안됨
name
}
}

사용빈도 : void > unknown > never(거의 안씀)
l : or
& : and

function add(a:number, b:number) :number { // 자동으로 return값의 형이 number라는 걸 안다. 따라서 굳이 함수의 자료형을 명시하지 않아도 됨
return a + b;
}

-->> 화살표 함수로 변경

화살표 함수 :
화살표 함수를 써서 객체를 반환할 때 소괄호()를 사용한다.
{return}을 생략할 수 있다.
const add = (a:number, b:number) :number =>a+b;

https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%95%EB%A6%AC
즉, 화살표 함수 정리
1. 화살표함수의 몸체가 한줄이라면 {return }을 생략할 수 있다.
2. { return {}} 이런 형태처럼 객체를 반환할 때, {return }대신에 ()를 쓴다. 즉 ({ 객체형태}) -> 즉 화살표함수의 몸체가 한줄일 때 객체 반환시 생김새
call signatures : 함수 위에 마우스를 올렸을 때 보게 되는 것
const add = (a:number, b:number) => a + b; // 이 함수의 call signatures는 const add : (a:number, b:number) => number;
call signatures를 뜯어보기
(a:number, b:number) --> 함수의 인자의 타입을 알려줌
=> number --> 함수 반환값의 타입을 알려줌

#call signature를 선언하는 방법
화살표 함수의 call signature에서 '=>' 뒤의 자료형은 return 반.환.값의 자료형을 의미한다. 만약, 함수가 void 형이라면 ?? --> 생각할 문제
#const add = (a:number, b:number) => a+b; 라는 화살표 함수의 call signatures를 지정하는 방법
1) type Add = (a:number, b:number) => number /좌우 서로 동일 call signatures*/ const Add = { (a:number, b:number) : number }
2) const add : Add = (a,b) => a+b;

화살표 함수의 call signature를 선언 할 때는 함수 명 바로 뒤에 적기
화살표 함수의 return값의 자료형을 선언할 때는 '=>' 바로 앞에 적기
call signature를 선언하면 함수의 인자의 자료형과 함수 return값의 자료형을 동시에 지정할 수 있다.
call signature를 선언하면 좋은점 : 타입을 생각하도록 해준다. -> 함수의 타입을 설명하고, 그리고 나서 코드를 구현하게 된다.
즉, 함수의 타입을 설명하는 부분과 함수를 구현하는 부분을 구분하게 해준다.

오버로딩 : 함수가 서로 다른 여러개의 call signatures를 가지고 있을 때 발생

call signature를 만드는 두번째 방법
type Add = {
(a:number, b: number) : number
}
// 1. {}로 묶는다. 2. 함수 return 반환값 타입을 ':'를 사용해서 쓴다.
이것과 같은게
type Add = (a:number, b:number) => number

type Add = {
(a:number, b:number) : number
(a:number, b:string) : number
}
잘못된 예 ) const add : Add = (a, b) => a+b// 에러. b가 string 형태라면, number와 string을 + 할 수 없잖아.

const add : Add = (a,b) => {
if(typeof b ==="string") return a;
return a + b;
}

type Config = { // type이 객체 형태이다.
path : string
state : object
} // Config란 객체형태의 type은 string형의 path, object형의 state를 무조건 가지고 있는 객체이다.

type Push = { // type이 오버로딩인 것이다.
(path : string) : void // 매개변수(인자)가 string 형태이면서 함수 return 반환값 type이 void 즉, 반환하지 않음
(config : Config) : void // 매개변수(인자)가 Config(= 객체 형태)이면서 함수 return 반환값 type이 void 즉, 반환하지 않음
}

const push : Push = (config) => {
if(typeof config ==="string") {console.log(config)}
else {console.log(config.path)};
}
--->
push는 화살표 함수이다. 이 함수의 매개변수(인자)명은 config이다.
이 config의 type이 string형이면 config를 콘솔에 찍어라
아니라면 (즉 config의 type이 Config -> 객체형태라면 config.path를 콘솔에 찍어라 )

type Add = { // 매개변수의 개수가 다른 오버로딩일 때 !
(a:number, b:number) : number
(a:number, b:number, c:number) : number // c 매개변수는 옵션같은것이다. a,b 매개변수는 공통이다.
}
// 오버로딩시 일어날 가능성이 있는 모든 call signatures를 만든다.

즉, add란 함수의 call signatures은 (a:number, b:number) : number 또는 (a:number, b:number, c:number) : number이다.
add함수는 매개변수가 2개일 수있고 3개일 수 있다. 즉, 최소 매개변수는 2개 이상이라는 것이다. 그리고 이 2개가 공통 개수이다.
const add : Add = (a,b,c?:number) =>{ // c는 number일수도있고 undefined일 수도 있다.
if(c) return a + b +c // 만약 c가 거짓이 아니라면 --> 즉 c가 undefined가 아니라면 -->c는 number형이라는 거고 매개변수의 개수가 3개라는 거고 이 3개를 모두 더한 값을 return하라는 말
else return a + b // 만약 c가 거짓이라면 - >c가 undefined라면 --> 매개변수가 2개라는 것이고, a +b를 반환해라.
}
add(1,2)
add(1,2,3)

type Add = (a:number, b:number) => number
const add : Add = (a, b) => a+b

type Add = {
(a:number, b:number) : number
(a:number, b:string) : number
}
const add :Add =(a,b) => {
if(typeof b ==="string") return a
return a+b
}

type Add = {
(a:number, b:number, c:number) : number
(a:number, b:number) : number
}
const add : Add = (a, b, c?:number) => {
if(c) return a + b + c
return a+b
}
type Config = {
path : string
state : object
}

type Push = {
(path : string) : void
(config : Config) : void
}

const push : Push = (config) => {
if(typeof config ==="string" ) {console.log(config)}
else {console.log(config.path, config.state)}
}

type SuperPrint = {
(arr : Generic[]) :void
}

const superPrint : SuperPrint = (arr) => {
arr.forEach(i => console.log(i));
}

superPrint([1,2,3,"true", false]); 이것의 call signatures -->

const superPrint : <number | string | boolean >(arr : (string | number |boolean)[]) => void
//type SuperPrint = (arr : Generic[]) => Generic;
type SuperPrint = {
(arr : Generic[]) : Generic;
}
const superPrint : SuperPrint = (arr) => arr[0]
let result = superPrint([1,2,3,"true", false]);
result.toUpperCase() ---> 여기서 에러가 난다는 사실을 미리 알려줌

--> 아니 그러면 제네릭 말고 any를 쓸 수 있다고 생각이 들 수 있어.
type SuperPrint = {
(arr : any[]) : any
}
const superPrint : SuperPrint = (arr) => arr[0];
let result = superPrint(3, "1", true);
result.toUpperCase() ---> 여기서 에러가 난다는 사실을 미리 알려주지 않음 즉, 타입스크립트의 장점을 살릴 수 없는 것임.

type SuperPrint = {
<G, T>(a: G[], b: T) : G // G와 T라는 제네릭을 사용할 것임. 매개변수는 a와 b가 있고, a의 타입은 G[] b의 타입은 T
} // 함수의 return반환 타입은 G이다.
// 타입스크립트에게 G는 함수의 첫번째 파라미터로 배열이 올거라고 말해주고
// T는 함수의 두번째 파라미터의 type이라고 말해준다.
const superPrint : SuperPrint = (a, b) => a[0] // superPrint라는 화살표함수는 a,b라는 매개변수가 있고 a배열의 0번째 인덱스를 return반환값으로 내보낸다.
const a = superPrint([2,3,4], "1'); // superPrint함수를 호출하는데 number[], string type의 인자를 사용하여 호출한다. --> 자동으로 number가 G가 되는 것이고, string이 T가 되는 것이다.
const b = superPrint([true, false, true], 1); // G는 boolean , T는 number
const c = superPrint(["a", "b", "c"], false); // G는 string T는 boolean
cosnt d = superPrint([1,2, true, "hello"], 5) // G는 number, boolean, string T는 number

// 타입스크립트가 스스로 이게 어떤 타입인지 찾게 하는 것이 제일 좋다.
라이브러리를 만들거나, 다른 개발자가 사용할 기능을 개발하는 경우엔 제네릭이 유용하다.
// 라이브러리나 코드를 디자인할 때 제네릭을 쓴다.
// 제네릭은 기본적으로 placeholder를 상요하서 내가 작성한 코드의 타입 기준으로 바꿔준다.
타입스크립트는 placeholder를 발견한 타입으로 대체한다.
타입스크립트는 제네릭이 처음 사용되는 지점을 기반으로 타입이 무엇인지 알게 된다.

제네릭 이름을 지을 때 대문자로 시작하기만하면 된다.
type SuperPrint = {
(arr : Generic[]) : void
}

const superPrint : SuperPrint = (arr) => {arr.forEach(i => console.log(i))};

function superPrint(a: T[]) [
return a[0]
}

const result =superPrint([1,2,3,4]) // result는 1이 된다. 하지만 typescript가 스스로 타입을 찾게 해주는 것이 좋음. 즉, 걍 라고 말하지 않아도 되고 그게 더 좋다는 것임.

type Player= { // Player는 E라는 제네릭을 받게 할 것임.
name : string
extraInfo : E
}
type PlayerExtra = {favFood : string}
type SunokPlayer = Player

const sunokPlayer : SunokPlayer = {
name : "sunok"
extraInfo : {
favFood : "mara"
}
}

const lyne : Player = {
name : "lyne",
extraInfo : null
}

---> 타입들끼리 일종의 재사용을 할 수 있다.
만약 많은 것들이 있는 큰 타입을 하나 가지고 있는데, 그 중 하나가 달라질 수 있는 타입이라면,
제네릭을 넣으면 된다.

type A = Array
const a : A = [1,2,3,4]

function printAllNumbers(arr: Array){
arr.forEach(i => console.log(i))

}
추상클래스 : 다른 클래스가 상속받을 수 있는 클래스
추상 클래스는 직접 새로운 인스턴스를 만들 수 없다.
추상 클래스는 오직 다른 곳에서 상속 받을 수만 있는 클래스다.

추상 클래스의 틀
abstract class User {
constructor{

}

}
진짜 집중하자.

call signatures : 함수가 어떻게 호출되는지 설명해주는 부분
function add(a:number, b:number) : number {
return a+b
}

const add = (a : number, b: number) :number => a + b
type Add = (a : number, b : number) => number
type Add = {
(a:number , b : number) : number

}
const add : Add = (a,b) => a + b
function add(a,b) : Add {
return a +b

}
type Add = {
(a:number, b:number) : number
(a:number, b:string) : number
}

const add : Add = (a,b) => {
if(typeof b ==="string"){return a}
else { return a +b}

}
type Config = {
path : string
state : object
}
type Push = {
(path : string) : void
(config : Config) : void
}
const push : Push = (config)=> {
if(typeof config ==="string") { console.log(config)}
else {console.log(config.path)}

}
type Add = {
(a: number, b:number, c:number) : number
(a: number, b:number) : number
}

const add : Add = (a,b, c?:number) ={
if(c){return a + b + c}
{return a + b}
}

다형성 - 제네릭 기법 이용
// 배열을 받고 그 배열의 결과를 print 해주는 함수를 만들어줌

제네릭을 사용할 때
1) call signature를 작성시
2) 어떤 타입이 들어오는지 확실하게 모를 때
type PrintArr = {
(arr : Generic[]) : void
// (arr : (number | boolean)[]) : void --> 비추천방식. 모든 가능성을 다 조합해서 만들어야 함.
}
const printArr : PrintArr = (arr) => {
arr.forEach(i => console.log(i))
}

printArr([1,2, true, false, "string"])
// type PrintArr = {
<number | boolean | string>(arr : (number | boolean | string)[]) : void ---> 타입스크립트가 이렇게 자동으로 call signature을 만들어준다.

}
배열의 첫번째 요소를 리턴하는 것 만들어라

type PrintZero = {
(arr : Generic[]) : Generic
}
const printZero : PrintZero = (arr) => arr[0];
const d = printZero([1,2,"3",true])
// type PrintZero = {
<number | string | true>(arr : (number | string | boolean)[]) => (number | string | boolean)
}
--> 즉 제네릭은 : 타입스크립트에게 타입을 유추하도록 알려준것. 그 타입의 배열이 될 것이라는 것을 인지하고 그 타입 중 하나를 리턴하도록 한다.
--> <number | string | true>(arr : (number | string | boolean)[]) => (number | string | boolean) 이런식으로 우리가 이 조합들을 다 적을 필요가 없다.

제네릭은 기본적으로 placeholder를 사용해서 내가 작성한 코드의 타입 기준으로 바꿔준다.

any는 어지간하면 쓰지말자 --> 에러날수 있음

제네릭을 쓰기 때문에 call signature를 직접 짜줄 필요가 없다.
제네릭 짜고, 매개변수가 2개이고 첫번째 매개변수의 자료형을 return 하는 type을 짜라
Type SuperPrint = {
<A, B>(a : A[], b : B) : A
}
const superPrint : SuperPrint = (a,b) => a[0]
const a1 = superPrint([1,2,3], true)
const a2 = superPrint(["1", "2', "3"], 1)
const a3 = superprint([true, false], "1")

// 타입스크립트는 제네릭을 처음 인식 했을 때와 제네릭의 순서를 기반으로 제네릭의 타입을 알게 된다.

// 여기에서 요구에 따라 call signature를 생성한다는 것을
// 제네릭을 일반 함수에서 쓸 때는 함수명 바로 뒤에 <> 씀 <>()이런 구조인갑다
function explicitGenerics(a : Generic[]){
return a[0];
}

cosnt result = explicitGenerics([1,2,3,4]); // 함수 호출 할 때 Generic을 명시해도 된다. 다만, 타입스크립트가 타입을 유추하게 하는게 좋다.

implements를 쓰는 이유가 extends는 js에서 쓰는데 얘는 안쓴단 말임
js에서 쓰는 걸 써버리면 js로 바뀌어버리잖아 바뀌어버리면 일반 클래스로 바뀌어버리는 것임 그래서 인터페이스 +implements를 쓰는거야 js에서 안쓰는 걸 써버려서 일반 클래스로 바뀌어버리지 않게!!!!!!!!!!!!!!!!!
그러면 인터페이스를 추적할 수 없음 그래서 좋음

인터페이스를 상속할 때 property를 private, protected로 만들지 못함
ex )
class Player implements User{
constractor(
private firstName : string //// 에러 --- >User란 인터페이스를 상속할 때 property는 private, protected로 못한다고
// 인터페이스 상속할 때 property를 public으로 해놓아야 된다고
그리고 implements를 쓰면 가벼워진다.(js에서 알아먹지 못하니까 )
)

}

인터페이스 vs 클래스
인터페이스
1) 공통점 : 고유한 사용처가 있다. 클래스의 모양을 알려줌
2) 인터페이스 독특한점 : 자바스크립트 코드로 컴파일되지 않음 , 하나 이상의 인터페이스를 동시에 상속할 수 있다.
인터페이스를 타입처럼 쓸 수 있어서 매개변수 타입으로 쓸 수 있고 return 타입으로 쓸 수 있다.
3) 인터페이스 문제점 : 인터페이스 상속시 public으로 만들어야 한다.

추상클래스를 쓰면 자바스크립트에서는 일반적인 클래스로 바뀌어 파일 크기가 좀 더 커지고, 추가 클래스가 만들어진다.
만약, 추상 클래스를 다른 클래스들이 특정 모양을 따르도록 하기 위한 용도로 쓴다면 추상클래스말고 인터페이스를 쓰라는 말이다 . ( 그중에서도 extends가 아니라 implements를 써라. extends는 js가 알아먹을 수 있으니까 )

1 ) 타입을 쓰고 싶으면 type 키워드를 쓰면 된다.
- 오브젝트 모양을 설명
- 타입 alias를 만드는 것 type Player = number
- 타입을 특정된 값으로 만듦 type Num = 1 : 2

타입스크립트에게 오브젝트의 모양을 알려줄 때 쓰는 것
type PlayerA = {
name : string
}
const playerA : PlayerA = {
name : "sunok"
}

class Player{
constructor (
private firstName : string,
private lastName : string
public nickName : string
) {}
}

const sunok = new Player("ryu", "sunok", "선옥");
abstract class User{
construtor(
protected firstName : string,
protected lastName : string,
public nickName : string
){}
abstract getNickName():void
getFullName(){
return ${this.firstName} ${this.lastName}
}
}
class Player extends User{
getNickName(){
console.log(this.firstName)
console.log(this.lastName)
console.log(this nickName)
}
}

const sunok = new Player("ryu", "sunok", "선옥");

sunok.getFullName();
type Words = {
[key : string] : string // Words타입이 string만을 property로 가지는 오브젝트라고 말함.
}
let dict :Words = {
"potato" : "food"
}
class Dict {
private words : Words // 생성자에서 직접 초기화 되지 않는 property다.
constructor(
this.words = {} // words라는 property를 생성자에서 수동으로 초기화하는 이유는 이렇게 하지 않으면, 초기화가 없고, 생성자에서 정의된 sign이 아니라는 에러가 뜬다.
(Property 'words' has no initializer and is not defintely assigned in the constructor)
)
add(word : Word){
if(this.words[word.term] === undefined){
this.words[word.term] = word.def
}
}
delete(word : Word){
this.words[word.term] = undefined
}
update(word : Word){
if(this.words[word.term]){
this.words[word.term] = word.def
}
}
def(term : string){

return this.words[term]
}
}

class Word {
constructor(
public term : string
public def : string
) {}
printWord(word : Word){
return word[term]
}
}

const kimchi = new Word("kimchi", "한국 전통음식")
const dict = new Dict();
dict.add(kimchi)
dict.def("kimchi")

//
요소를 public으로 두되, 누군가가 그 요소에 직접 접근해서 수정할 수 없도록 하고 싶을 때(단, 그 값을 보여줄 수는 있게)
1) 요소에 readonly를 쓴다.

// 타입을 쓰는 방법
1)
type Player= {
nickName : string,
healthBar : number
}

const nico : Player= {
nickName : "nico"
healthBar : 10

}
type Food = string

cosnt kimchi : Food = "delicious"
concrete 타입의 특정값을 쓰는 방법
type Team = "red" | "blue" | "yellow" // 타입이 특정 값을 가지도록 제한할 수 있다.
type Health = 1 | 5 | 10
type Player = {
nickname : string
team : Team
health : Health
}
const nico : Player = {
nickname : "sunok"
team : "pink" // 에러발생
health : 10
}

interface Player { // 인터페이스 유일한 역할 : 오브젝트의 모양을 특정해주기 위함
nickname : string
team : Team
health : Health

}
타입스크립트에게 오브젝트이 모양을 알려주는 방법 두가지
1) interface를 사용하여 오브젝트의 모양을 특정한다.
ex)
interface Player {
nickname : string
team : Team
health : Health
}
2) type을 사용하여 오브젝트이 모양을 특정한다.
type Player = {
nickname : string
team : Team
health : Health
}

type과 interface의 다른점
type키워드는 interface에 비해 좀 더 활용할 수 있는게 많다.
인터페이스는 오로지 오브젝트이 모양을 타입스크립트에게 설명해주기 위해서만 사용되는 키워드다 .
따라서 이러한 예시로 사용할 수 없다.
interface Hello = string
그러나, type을 사용하여 type Hello = string은 사용가능하다.

interface User {
name : string
}
interface Player extends User {

}

const sunok : Player = {
name : "sunok"

}
type User = {
name : string
}
type Player = User & {
}
const sunok : Player = {
name : "sunok"

}
// interface User {
readonly name : string // readonly도 가능 이럴 경우에
}

interface Player extends User {
}
const nico : Player = {
name : "nico" // 가능
}
nico.name = "readonly를 사용한 요소의 값을 바꾸기"

interface User {
name :string
}
interface User {
lastName : string
}
interface User{

health : number
}

cosnt nico : User = {
name : "nico"
lastName : "ryu"
health : 1
}
// 인터페이스를 동일한 이름으로 여러개 만들고 이를 합쳐서 쓰면 타입스크립트가 알아서 하나로 합쳐준다.

// type을 동일한 이름으로 여러개 만들면 에러가 난다.
abstract class User{
constructor(
protected firstName : string,
protected lastName : string
){}
abstract sayHi(name : string) :string // 추상 메소드는 매개변수의 타입과 함수 반환값의 타입을 적어주면 된다. 상속받는 클래스에서 메소드 구현부에서 내용을 구체적으로 적어주면된다.
abstract fullName() : string
}

class Player extends User{
fullName(){
return ${this.firstName} ${this.lastName} // 상속받았으면 this로 쓸 수 있구나!
}
sayHi(name){
return hello ${name}. my name is ${this.fullName()}
}
}

new User() // 불가능 -- > 추상 클래스의 인스턴스를 생성할 수 없다.
추상 클래스의 문제점은 자바스크립트는 abstract 개념이 없다는 것이다. 즉, 타입스크립트로 추상 클래스를 만들면 결국 클래스로 변한다.
왜 추상 클래스를 만들까? -> 표준화된 property와 메소드를 갖도록 해주는 청사진을 만들기 위해 추상클래스를 사용한다.
인터페이스를 쓰는 이유 : 인터페이스는 컴파일하면 js로 바뀌지 않고 사라진다.
인터페이스를 쓸 때 클래스가 특정 형태를 따르도록 어떻게 강제하는가?
extends를 쓰면 자바스크립트로 바뀐다. 자바스크립트에서는 클래스 뒤에 extends를 붙이는 문법을 사용한다. 이를 통해 클래스를 상속받을 수 있다.
implements라는 자바스클비트가 사용하지 않는 단어를 쓸 것이다. --> 우선 이를 쓰면 코드가 더 가벼워진다.

interface User {
firstName : string,
lastName : string
sayHi(name : string) : string
fullName() : string
}
class Player implements User {

}
// User 인터페이스를 추적할 수 가 없는데, 인터페이스는 타입스크립트에서만 존재하고 -- > 인터페이스는 타입스크립트에서만 존재하기 때문
하지만, 타입스크립트가 Player는 User인터페이스를 상속해야 한다고 알려주고 있다 . - >인터페이스를 제대로 상속하지 않았다고 말해주고 있다 . player가 나열된 property들을 가지고 있지 않다고 알려줌
클래스가 원하는 대로 행동하고 원하는 property들을 가지도록 강제하고 싶었잖아 이런 목적을 이루기 위해서 추상 클래스를 사용했는데 이건 JS에서 클래스로 바뀌였다.
대신에 인터페이스를 상속하는 더 간단한 방법
인터페이스는 타입스크립트에서만 존재함
class Player implements User{
constructor(
// 인터페이스를 상속할 때는 property를 private로 만들지 못한다.
// 인터페이스를 상속 할 때는 property들이 public이 되어야 한다.

)

}

extends vs implements 차이
extends : 상속받고자 하는 부모 클래스를 명시하는 것
즉 extends에 원하는 클래스를 명시하면 해당 클래스의 프로퍼티와 메서드를 따로 구현하지 않아도 인스턴스에서 자유롭게 사용 가능하다.
--> 부모가 가진거 너맘대로 써도 돼
implements : 미리 추상화 된 인터페이스를 채택하여 사용하는 것
상속(extends)와 다르게 implements로 어떤 인터페이스를 채택하면 추상화된 메서드나 프로퍼티를 반드시 구현해주어야 한다.
--> 해당 클래스는 이 인터페이스 모양이니깐 반드시 이 조건을 가져야 한다.

추상클래스에서는 생성자에서 권한을 컨트롤 할수 있었지만
인터페이스를 상속받은 클래스는 요소의 권한을 무조건 public으로 해야 한다.

하나 이상의 인터페이스를 동시에 상속할 수 있다.
interface Human [
health : number
}
class Player implements User, human {
constructor(
public firstName : string,
public lastName : string,
public health : number
)
}
-- > 클래스가 아니지만 클래스의 모양을 특정할 수 있게 해주는 간단한 방법이다.

인터페이스를 타입으로 지정할 수 있다.
function makeUser(user : User){
return "hi"
}

makeUser({firstName : "nico"
lastName : "las"
fullName : () => "xx";
sayHi : (name) = >"string"

})

// argument에 인터페이스를 씀으로써 오브젝트의 모양을 지정해줄 수 있다 .
// 인터페이스를 리턴할 수도 있다는 것이다.
// 인터페이스를 반환한다면, 타입을 리턴하는 것처럼
new 다음에 클래스를 넣어줘야 하는 class의 리턴과는 달리
만약 인터페이스를 리턴한다면 , new User처럼 쓸 필요가 없다.

return {
firstName : "nico"
lastName : "las"
fullName : () => "xx"
sayHi : (name) => "string"

}
이렇게 반환해주면 된. 인터페이스의 내용물만 넣어주면 된다.
인터페이스를 argument로 넣어줄 때도 아까처럼 내용물만 넣어주면된다.

implements를 쓰는 이유가 extends는 js에서 쓰는데 얘는 안쓴단 말임
js에서 쓰는 걸 써버리면 js로 바뀌어버리잖아 바뀌어버리면 일반 클래스로 바뀌어버리는 것임 그래서 인터페이스 +implements를 쓰는거야 js에서 안쓰는 걸 써버려서 일반 클래스로 바뀌어버리지 않게!!!!!!!!!!!!!!!!!
그러면 인터페이스를 추적할 수 없음 그래서 좋음

인터페이스를 상속할 때 property를 private, protected로 만들지 못함
ex )
class Player implements User{
constractor(
private firstName : string //// 에러 --- >User란 인터페이스를 상속할 때 property는 private, protected로 못한다고
// 인터페이스 상속할 때 property를 public으로 해놓아야 된다고
그리고 implements를 쓰면 가벼워진다.(js에서 알아먹지 못하니까 )
)

}

인터페이스 vs 클래스
인터페이스
1) 공통점 : 고유한 사용처가 있다. 클래스의 모양을 알려줌
2) 인터페이스 독특한점 : 자바스크립트 코드로 컴파일되지 않음 , 하나 이상의 인터페이스를 동시에 상속할 수 있다.
인터페이스를 타입처럼 쓸 수 있어서 매개변수 타입으로 쓸 수 있고 return 타입으로 쓸 수 있다.
3) 인터페이스 문제점 : 인터페이스 상속시 public으로 만들어야 한다.

추상클래스를 쓰면 자바스크립트에서는 일반적인 클래스로 바뀌어 파일 크기가 좀 더 커지고, 추가 클래스가 만들어진다.
만약, 추상 클래스를 다른 클래스들이 특정 모양을 따르도록 하기 위한 용도로 쓴다면 추상클래스말고 인터페이스를 쓰라는 말이다 . ( 그중에서도 extends가 아니라 implements를 써라. extends는 js가 알아먹을 수 있으니까 )

1 ) 타입을 쓰고 싶으면 type 키워드를 쓰면 된다.
- 오브젝트 모양을 설명
- 타입 alias를 만드는 것 type Player = number
- 타입을 특정된 값으로 만듦 type Num = 1 | 2

타입스크립트에게 오브젝트의 모양을 알려줄 때 쓰는 것
타입
type PlayerA = {
name : string
}
const playerA : PlayerA = {
name : "sunok"
}
///
인터페이스
interface PlayerB {
name :string
}
const playerB : PlayerB = {
name : "sunok"
}

[[[
const playerB : PlayerB = {
name : "sunok"
}
]]]] 이부분만 봤을 때 PlayerB가 인터페이스인지 타입인지 구분할수 없다. 이둘은 같은 목표(타입스크립트에게 오브젝트의 모양과 타입을 알려주는게 목표)를 가지고 있기 때문이다.

type PlayerA = {
name : string
}
type PlayerAA = PlayerA & { //type을 섞을 때 이렇게 한다 .
lastName : string
}

const playerA : PlayerAA = {
name : "sunok"
lastName : "ryu"
}

interface PlayerB {
name : string
}
interface PlayerBB extends PlayerB {
lastName : string
}
const playerB : PlayerB = {
name : "sunok"
lastName : "ryu"
}

그리고 interface에도 클래스와 같이 접근제어자로 public 또는 default를 사용할 수 있습니다.

여러 개의 인터페이스로부터 상속을 받는 것이 가능합니다.
interface PlayerBB extends PlayerB {
lastName : string
}
interface PlayerBB {
health : number
} // 같은 이름의 interface여러번 만드는 거 가능

// 클래스나 오브젝트의 모양을 정의하고싶으면 인터페이스 사용하고 다른 경우 type사용해라

다형성, 제네릭, 클래스, 인터페이스
다형성 : 다른 모양의 코드를 가질 수 있게 해주는것
how ? 제네릭을 사용하는 것이다.
제네릭 : placeholder 타입을 쓸 수 있도록 해준다 .

** 로컬 스토리지 API와 비슷한 API를 만들어볼 것임

interface SStorage{ / / 이미 Storage라는 interface가 있기 때문에 override하는걸 원하지 않기 때문에 SStorage로 적는다.
[key:string] : T// key가 제한되지 않은 오브젝트를 정의하게 해준다.
}

class Localstorage { / / T라는 제네릭은 클래스 이름에 들어오지만, 같은 제네릭을 인터페이스로 보낼 거임
// - > 제네릭을 클래스로 보내고, 클래스는 제네릭을 인터페이스로 보낸뒤에 인터페이스는 제네릭을 사용한다.
private storage : SStorage = {}
set(key : string, value : T){this.storage[key] = value}
remove(key : string){ remove this.storage[key]}
get(key : string) : T { return this.storage[key]}
clear() {this.storage = {}}
)
}
const stringsStorage = new LocalStorage();
stringsStorage.set("cat", "고양이");
const result = stringsStorage.get("ket")
const booleansStorage = new LocalStorage();
booleansStorage.get("xxx")
booleansStorage.set("hello", true);



타입스크립트는 컴파일러다.

mkdir : 폴더생성
code : 폴더실행
npm init -y : nodejs프로젝트 생성

기본에서 main 없애고
script - "test" 줄없앤다.
npm i -D typescript : 타입스크립트를 devDependencies에 설치
src폴더 생성 - index.ts
이 파일에 타입스크립트를 실행해서 자바스크립트 파일을 받기를 원한다.
-> tsconfig.json만들기 배시에서 touch tsconfig.json 해서 tsconfig.json 파일을 만들거나 직접 만들어준다.
tsconfig.json 파일이 있다는 것을 통해 vscode는 우리가 타입스크립트로 작업한다는 것을 즉시 알게 되고 자동 완성기능을 제공해준다 .

tsconfig.json 들어갈 내용
1) 어디에 타입스크립트 파일이 위치하는 지

include 배열에 자바스크립트로 컴파일하고 싶은 모든 디렉터리를 넣어준다.
["src"] // 타입스크립트가 src의 모든 파일을 확인한다는 것을 의미한다.
compilerOptions
"outDir" : "build" -->outDir 자바스크립트 파일이 생성될 디렉터리를 지정 --> build라는 폴더에 만들어진 코드를 넣을 것이라 알려줌
package.json -> script부분에 "build" : "tsc"를 적어준다.
npm run build를 입력한다. --> tsc가 작동한다.
그러면 build파일이 생성된다.
package.json

{
"name": "typechain",
"version": "1.0.0",
"description": "",
"scripts": {
"build" : "tsc" // typescriptcompiler 이름이 build라는 것이다. built면 나중에 npm run built라고 쓰면됨
},
"keywords": [],
"author": "",
"license": "ISC",
"devDependencies": { // npm i -D typescript 타입스크립트를 devDependencies에 설치
"typescript": "^4.9.4"
}

}
tsconfig.json

{
"include" : ["src"], // 타입스크립트가 src 폴더 안에 있는 모든 소스를 검사한다는 것임
"compilerOptions": {
"outDir": "build" // 타입스크립트가 컴파일 한 결과를 build라는 폴더 안에 소스를 놓겠다는 말임 "zz"라고 지정되었으면 zz라는 npm run build 명령어 이후
zz라는 폴더가 생성될 것이고 그안에 결과가 저장될 것임
}
}

const hello= () => "hi";

이코드가

var hello = function () { return "hi"; };

이렇게 변함
즉 , 타입스크립트가 코드를 컴파일해서 낮은 버전의 자바스크립트 코드로 바꿔준것임 --> 어디서든 이해할 수 있는 더 호환성이 좋은 자바스크립트 코드로 바꾼것이다.
하지만 var같은건 안쓰는게 좋다그랬고... 우리가 어떤 버전의 자바스크립트로 바꿀 지 설정할 수 있나? ㅇㅇ

--> target이 기본값으로 es3으로 되어있어서 이딴 식으로 변한것임
tsconfig.json에서 target의 값을 es6으로 바꿔주고, npm run build해주면 const hello = () => "hi"; 이렇게 변함

tsconfig.json에서 "compilerOptions"에서 target을 정의하자
--> value값은 어떤 버전의 타입스크립트로 컴파일하고 싶은지를 나타내.

자바스크립트에 클래스가 없던 시절의 코드로 컴파일 할 수도 있음 es3로 target를 해주면
class Block {
constructor(private data : string) {}
static hello(){
return "hi";
}
}

이 코드를 타입스크립트로 컴파일하면
var Block = /* @class / (function () {
function Block(data) {
this.data = data;
}
Block.hello = function () {
return "hi";
};
return Block;
}());

이렇게 나온다 .

target은 es6으로 하는 걸 추천
대부분의 nodeJS와 브라우저가 es6을 지원함
es2022 --> 최소한의 호환성도 충족시키지 못할 수 있다. 이건 엄청 최신의 자바스크립트를 쓰겠다는 말임.

create-react-app / nextjs, nestjs같은 프레임워크를 쓴다면 , target에 대해 엄청 고민하지 않아도 되지만, target이 무슨역할을 하는지는 알고 있어야 한다.

tsconfig.json
lib : 합쳐진 라이브러리의 정의 파일을 특정해주는 역할을 함
ex ) es6을 지원하는 서버와 DOM 즉, 브라우저 환경에서 코드를 실행시킬거라고 가정한다면
"lib" : ["es6", "DOM"]
만약 DOM을 lib에 포함시켜두고, 타입스크립트 코드에서 document를 쓰면, 타입스크립트는 document가 뭔지 알고 있다.
즉, 타입스크립트는 document가 가지고 있는 모든 이벤트와 메소드를 보여줄 뿐더러 해당 타입을 설명해준다.
윈도우는 컨트롤, apple은 command버튼을 누른 상태로 궁금한 것들을 클릭하면,(실습에서는 document.querySelector였음) -->lib.dom.d.ts로 불리는 파일로 이동한다. querySelector의 call signature와 비슷한 것이 있음
우리는 타입스크립트에게 이 코드가 브라우저를 위해 작성되고 있다고 알려줌
그래서 타입스크립트는 이 모든 자동완성을 제공함으로써 우리를 도와주는 것이다.
왜냐하면 타입스크립트가 브라우저의 api와 타입들을 알고있기 때문이다.
ex. localStorage.getItem()을 자동완성하면 타입스크립트는 call signatures를 보여주는데
타입스크립트는 브라우저 api의 타입을 어떠한 방식으로든 알고 있는 것이다.
즉 , lib를 통해 우리는 타입스크립트에게 코드가 어디서 동작할 것인지를 알려줄 수 있다. (es6 : 컴파일이후 자바스크립트가 어떤 버전에서 동작할 것인지, DOM 브라우저 환경에서 코드를 실행시킬 것이라는 의미 )
타입스크립트는 우리가 사용할 api가 뭔지 아니까 자동완성 기능을 제공해줄 수 있다.
예를들어 DOM을 지우면, 타입스크립트는 너가 브라우저를 위한 코드를 작성한다는 것을 모른다. 따라서 document.하고 자동완성이 안됨

{
"include" : ["src"],
"compilerOptions": {
"outDir": "build",
"target" : "ES6",
"lib" : ["es6"]
},

}
그리고 이렇게만 적혀있다면 node.js를 사용하는 백앤드 프로젝트를 다루고 있는 것처럼 보일 수 있다.
위처럼 적고 저장하고 index.ts에서 document를 쓰려고 시도하면 에러표시가 날 것이다. --> 타입스크립트는 내가 브라우저를 위한 코드를 작성한다는 것을 모름.

Math.fround() 위에 마우스 올려본다 -> Math는 자바스크립트 것이다. 근데 타입스크립트가 어캐 앎?
착한 사람들이 타입스크립트에 이 모든 API를 설명해주기 위해 시간을 할애했음
그리고 lib부분이 그걸 어떻게 설정하는지를 나타내는 곳이다. lib에서 설정해줘야 한다.
lib부분에 DOM을 적으면 document, window, localStorage 등을 쓸 수 있고 자동완성기능이 된다.
내가 타입스크립트에게 무슨 API를 쓸꺼고 어떤 환경에서 코드를 실행시킬지를 알려줬기 때문임

타입스크립트가 localStorage, Math, window 등의 타입을 이해하고 인지한다는 것을 알았음 -- >어떻게?
정의 파일에 들어가보면 , 타입스크립트는 내장된 자바스크립트 API를 위한 기본적인 타입정의를 가지고 있다고 함(어떤 닝겐이 타입스크립트에게 localStorage의 구조, 아규먼트, 리턴값과 리턴 타입을 설명해준 것임)
타입정의 : 내가 타입스크립트에게 자바스크립트 코드와 api타입을 설명해주기 위해 사용하는 것임.
타입스크립트는 우리가 자바스크립트를 자용할수 있도록해준다. ㅏ대부분 자바스크립트 라이브러리나 패키지를 사용한다는 것을 알기 때문임.
타입스크립트에게 우리가 불러올 자바스크립트 함수의 모양을 설명하려면 타입정의가 필요함.

어떻게 자바스크립트 파일과 모듈을 위한 타입정의를 작성하는지?

<<<<자바스크립트로 만들어진 패키지를 설치했을 때 타입스크립트에 패키지 타입을 정의하는 방법>>>>>>
타입스크립트가Math, window, localStorage 타입을 이해하는 이유
: 타입스크립트는 기본적인 JS타입 정의를 포함함
타입정의 : 타입스크립트에게 자바스크립트 코드와 API타입을 설명해주기 위해 사용하는 것

자바스크립트 파일과 모듈을 위한 타입정의 작성법
--- myPackage.js---
// myPackage가 node의 모듈인것처럼 (ex. 누군가가 깃허브와 npm에 푸시해둔것이고
// 우리가 이걸 설치했다고 가정)
export function init(config){
return true;
}
export function exit(code){
return code + 1;
}

내보낼 함수 앞에 export를 쓴다.
import {함수명} from "함수가 들어있는 파일명"
import { init,exit } from "myPackage"; --> 에러 발생 이유 :
1) "strict" : true를 써줘야 함 (엄격한 컴파일 모드 true)
2) Could not find a declaration file for module 'myPackage'. : 정의 파일을 찾을 수 없다

정의파일은 자바스크립트 코드의 모양을 타입스크립트에 설명해주는 파일이다.
타입스크립트에 해당 d.ts라는 정의 파일을 가지고 있어야 자동완성이 된다.

같은 src 폴더에
myPackage.d.ts 정의 파일을 만들어서 자동 완성이 되게 한다.
---------------myPackage.d.ts내용-----------
interface Config {
url : string
}
declare module "myPackage"{
// 함수의 타입만 정의하면된다. (call signatures)
function init(config : Config) : boolean;
function exit(code : number) : number;
}

localStorage.clear() // 모든 키 벨류 쌍을 지운다.
// 단어를 ctrl + 클릭 -> d.ts를 보여준다.

[index.ts]
import { init, exit } from "myPackage";
const result1 = init({
url: "i_love_seob"
});
const result2 = exit(1);

[myPackage.d.ts]
interface Config {
url : string
}
declare module "myPackage"{
function init(config : Config) : boolean;
function exit(code : number) : number;
}
[myPackage.js]
// myPackage가 node의 모듈인것처럼 (ex. 누군가가 깃허브와 npm에 푸시해둔것이고
// 우리가 이걸 설치했다고 가정)
export function init(config){
return true;
}
export function exit(code){
return code + 1;
}

<프로젝트 안에 자바스크립트와 타입스크립트 파일이 같이 들어있는 경우>
"allowJs" : true --> 타입스크립트 안에 자바스크립트를 허용한다.

---------------[index.ts]-------------
import { init , exit } from "./myPackage"; -->타입스크립트가 myPackage.js 파일 안에 들어와서 함수를 다 불러옴. (자바스크립트파일을 타입스크립트 파일로 변환 )
-- > 즉 "allowJs" : true 를 통해서 타입스크립트에서 js 파일 안에있는 함수를 가져온 것

타입 스크립트가 자바스크립트 파일을 확인하게도 하고 싶고
완전히 타입스크립트로 이전하고 싶지 않다면
코드가 많을 때는 파일은 그냥 자바스크립트 파일인채로 두는게 좋다.
타입스크립트는 자비스크립트 파일도 보호해준다.
자바스크립트에 보호장치를 더하는 방법 : // @ts-check
----- > // @ts-check의 의미 : 타입스크립트 파일이 자바스크립트 파일을 확인하는 부분

자바스크립트 파일이라서 타입스크립트를 쓸 수 없는 상황에서 타입스크립트가 제공하는 보호장치를 사용하고 싶을 때
JSDoc를 사용한다.
JSDoc : 자바스크립트 함수 바로 위에 코멘트를 적는다. ---> 타입스크립트가 이 코멘트를 읽을 수 있다.

단, "allowJs": true도 같이 해줘야한다.
ex) // @ts-check
/**
Initializes the project
@param {object} config // *자리에 매개변수 config 의 자료형을 적는다. 여기서는 object
@param {boolean} config.debug // config 객체의 debug 자료형이 boolean
@param {string} config.url // config 객체의 url 자료형이 string
@returns void // 함수의 return값 void
*/
----> 자바스크립트 파일안에 JSDoc 코멘트만 더하면 타입스크립트가 도와준다.
1) 자바스크립트 파일 내에서 타입스트립트의 도움을 받는 경우

2) 자바스크립트 파일을 타입스크립트로 바꾸는 경우
static 메소드는 인스턴스에 걸리는 것이 아니라 클래스에 종속된다.
클래스명.메소드명 ==/== this는 해당 클래스의 인스턴스에 접근하는 것이기 때문에 static 메소드가 포함되어있지 않음


